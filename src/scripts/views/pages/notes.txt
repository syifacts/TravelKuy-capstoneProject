const API_URLS = [
    'https://katalog.data.go.id/api/3/action/datastore_search?resource_id=266e3b85-1c43-4a84-b864-a54d41c218b1',
    'https://katalog.data.go.id/api/3/action/datastore_search?resource_id=bfe834ff-1cb6-4c1c-ae75-4fbe6d62f1ae'
];

const Agrowisata = {
    cachedData: [],
    newData: [],
    currentPage: 1,
    dataPerPage: 10,

    async render() {
        return `
            <nav>
                <ul>
                    <li><a href="#/agrowisata" id="nav-home">Beranda</a></li>
                    <li><a href="#/saved-data-page" id="nav-saved">Data Tersimpan</a></li>
                </ul>
            </nav>
            <h2>Lokasi Agrowisata</h2>
            <label for="filter-wilayah">Filter Wilayah:</label>
            <select id="filter-wilayah">
                <option value="">Semua Wilayah</option>
                <option value="Jakarta Barat">Jakarta Barat</option>
                <option value="Jakarta Timur">Jakarta Timur</option>
                <option value="Jakarta Utara">Jakarta Utara</option>
                <option value="Jakarta Selatan">Jakarta Selatan</option>
                <option value="Wilayah Lainnya">Wilayah Lainnya</option>
            </select>
            <div id="data-container">Loading data...</div>
            
            <button id="add-data-btn" aria-label="Tambah Data Baru">+</button>
        
            <div id="add-data-modal" class="modal hidden">
                <div class="modal-content">
                    <h3>Tambahkan Data Baru</h3>
                    <form id="add-data-form">
                        <input type="text" id="input-deskripsi" placeholder="Deskripsi" required>
                        <input type="text" id="input-lokasi" placeholder="Lokasi" required>
                        <input type="text" id="input-wilayah" placeholder="Wilayah" required>
                        <input type="text" id="input-kecamatan" placeholder="Kecamatan">
                        <input type="text" id="input-kelurahan" placeholder="Kelurahan">
                        <input type="text" id="input-fasilitas" placeholder="Fasilitas">
                        <input type="url" id="input-googlemaps" placeholder="Google Maps URL">
                        <button type="submit">Tambahkan</button>
                        <button type="button" id="cancel-btn">Batal</button>
                    </form>
                </div>
            </div>
            <div id="pagination-container"></div>
        `;
    },

    async afterRender() {
        const dataContainer = document.getElementById('data-container');
        const filterWilayah = document.getElementById('filter-wilayah');
        const addDataButton = document.getElementById('add-data-btn');
        const modal = document.getElementById('add-data-modal');
        const cancelButton = document.getElementById('cancel-btn');
        const paginationContainer = document.getElementById('pagination-container');

        this.loadLocalData();
        // Filter data saat filter berubah
        filterWilayah.addEventListener('change', () => {
            this.displayData([...this.cachedData, ...this.newData]);
            this.setupPagination();
        });

        // Load data baru dari localStorage
        const savedData = this.loadSavedData(); 

        // Ambil data dari API
        await this.fetchData();

        // Tampilkan data
        this.displayData([...this.cachedData, ...this.newData]);

        // Event handler untuk tombol tambah data
        addDataButton.addEventListener('click', () => {
            modal.classList.remove('hidden');
        });

        cancelButton.addEventListener('click', () => {
            modal.classList.add('hidden');
        });

        this.handleAddData();
        this.setupPagination();
    },

    async fetchData() {
        if (this.cachedData.length > 0) return;

        try {
            const responses = await Promise.all(API_URLS.map(url => fetch(url)));
            const results = await Promise.all(responses.map(res => res.json()));

            this.cachedData = results.flatMap((result, index) => {
                if (result.success) {
                    return index === 1
                        ? this.mapDataFromAPI2(result.result.records)
                        : result.result.records.map(record => ({
                            ...record,
                            foto: [
                                "https://via.placeholder.com/150/0000FF/FFFFFF?text=Foto+1", // Contoh foto hardcoded
                                "https://via.placeholder.com/150/FF0000/FFFFFF?text=Foto+2"  // Contoh foto hardcoded
                            ]
                        }));
                }
                return [];
            });
        } catch (error) {
            console.error('Error fetching data:', error);
            const dataContainer = document.getElementById('data-container');
            dataContainer.innerHTML = '<p>Error loading data. Please try again later.</p>';
        }
    },

    mapDataFromAPI2(records) {
        return records.map(record => ({
            deskripsi: record.nama_lokasi || 'Nama tidak tersedia',
            alamat: record.lokasi || 'Lokasi tidak tersedia',
            wilayah: record.wilayah || 'Wilayah tidak tersedia',
            kecamatan: '',
            kelurahan: '',
            fasilitas: '',
            googlemaps: '',
            foto: [
                "https://via.placeholder.com/150/0000FF/FFFFFF?text=Foto+1", // Contoh foto hardcoded
                "https://via.placeholder.com/150/FF0000/FFFFFF?text=Foto+2"  // Contoh foto hardcoded
            ],
            isApi2: true
        }));
    },

    loadSavedData() {
        try {
            const savedData = JSON.parse(localStorage.getItem('savedAgrowisata')) || [];
            return savedData;
        } catch (error) {
            console.error('Error loading saved data:', error);
            return [];
        }
    },

    displayData(records) {
        const dataContainer = document.getElementById('data-container');
        const selectedWilayah = document.getElementById('filter-wilayah').value;
        const savedData = this.loadSavedData();
        const allRecords = [...records, ...savedData];
    
        // Filter data berdasarkan wilayah
        const filteredData = this.filterDataByWilayah(allRecords, selectedWilayah);
    
        // Hilangkan duplikasi berdasarkan deskripsi
        const uniqueData = this.removeDuplicateData(filteredData);
    
        // Validasi currentPage agar tidak melebihi total halaman
        const totalPages = Math.ceil(uniqueData.length / this.dataPerPage);
        if (this.currentPage > totalPages && totalPages > 0) {
            this.currentPage = totalPages; // Set currentPage ke halaman terakhir jika lebih besar dari total
        }
    
        // Paginate data
        const paginatedData = this.paginateData(uniqueData, this.currentPage);
    
        // Tampilkan data
        dataContainer.innerHTML = `
            <div id="new-data-section">
                <h3>Data Baru yang Ditambahkan</h3>
                <div id="new-data-list"></div>
            </div>
            <div id="old-data-section">
                <h3>Data Agrowisata</h3>
                <div id="old-data-list"></div>
            </div>
        `;
    
        // Render data baru
        const newDataList = document.getElementById('new-data-list');
        const newData = paginatedData.filter(record => record.isNew);
        this.renderData(newData, newDataList);
    
        // Render data lama (termasuk yang sudah disimpan)
        const oldDataList = document.getElementById('old-data-list');
        const oldData = paginatedData.filter(record => !record .isNew);
        this.renderData(oldData, oldDataList);
    
        // Setup pagination hanya jika ada data yang ditampilkan
        this.setupPagination();
    },

    removeDuplicateData(records) {
        const seen = new Set();
        return records.filter(record => {
            const identifier = record.deskripsi; 
            if (seen.has(identifier)) {
                return false;
            }
            seen.add(identifier);
            return true;
        });
    },
    
    filterDataByWilayah(records, selectedWilayah) {
        if (!selectedWilayah) return records;

        return records.filter(record => {
            if (selectedWilayah === "Wilayah Lainnya") {
                return !["Jakarta Barat", "Jakarta Timur", "Jakarta Utara", "Jakarta Selatan", "Jakarta Pusat"].includes(record.wilayah);
            }
            return record.wilayah === selectedWilayah;
        });
    },

    paginateData(records, currentPage) {
        const filteredData = records.filter(record => record.deskripsi && record.deskripsi.trim() !== '');
        const totalPages = Math.ceil(filteredData.length / this.dataPerPage);
        const startIndex = (currentPage - 1) * this.dataPerPage;
        const endIndex = startIndex + this.dataPerPage;
    
        // Jika halaman kosong, kembali ke halaman pertama
        if (startIndex >= filteredData.length) {
            this.currentPage = totalPages; // Pastikan currentPage tidak lebih besar dari totalPages
            return filteredData.slice(0, this.dataPerPage);
        }
    
        return filteredData.slice(startIndex, endIndex);
    },

    renderData(data, container) {
        container.innerHTML = '';
        data.forEach(record => {
            const recordElement = this.createRecordElement(record);
            container.appendChild(recordElement);
        });
    },

    createRecordElement(record) {
        const recordElement = document.createElement('div');
        recordElement.classList.add('record');
        recordElement.innerHTML = `
            <h3>${record.deskripsi}</h3>
            <p><strong>Lokasi:</strong> ${record.alamat}</p>
            <p><strong>Wilayah:</strong> ${record.wilayah}</p>
            <p><strong>Kecamatan:</strong> ${record.kecamatan || '-'}</p>
            <p><strong>Kelurahan:</strong> ${record.kelurahan || '-'}</p>
            <p><strong>Fasilitas:</strong> ${record.fasilitas || '-'}</p>
            ${record.googlemaps && record.googlemaps.trim() !== '' ? `<p><a href="${record.googlemaps}" target="_blank">Lihat di Google Maps</a></p>` : ''}
            <div class="foto-container">
                ${record.foto.map(url => `<img src="${url}" alt="Foto Agrowisata" class="foto-agrowisata">`).join('')}
            </div>
            <button class="save-btn">Simpan</button>
        `;

        const saveBtn = recordElement.querySelector('.save-btn');
        const savedData = JSON.parse(localStorage.getItem('savedAgrowisata')) || [];
        const isSaved = savedData.some(saved => saved.deskripsi === record.deskripsi);

        // Update tombol jika data sudah tersimpan
        if (isSaved) {
            saveBtn.textContent = 'Tersimpan';
            saveBtn.disabled = true;
        }

        saveBtn.addEventListener('click', () => {
            this.saveData(record);
            saveBtn.textContent = 'Tersimpan';
            saveBtn.disabled = true;
        });

        return recordElement;
    },

    saveData(record) {
        const savedData = JSON.parse(localStorage.getItem('savedAgrowisata')) || [];
        
        // Cek apakah data sudah ada di dalam savedData berdasarkan deskripsi
        const isAlreadySaved = savedData.some(saved => saved.deskripsi === record.deskripsi);
        
        if (!isAlreadySaved) {
            savedData.push(record);
            localStorage.setItem('savedAgrowisata', JSON.stringify(savedData));
        }
    },
 
    setupPagination() {
        const allData = [...this.cachedData, ...this.newData];
        const filterValue = document.getElementById('filter-wilayah').value;
        const filteredData = this.filterDataByWilayah(allData, filterValue).filter(record => record.deskripsi && record.deskripsi.trim() !== '');
    
        // Hitung total halaman yang diperlukan berdasarkan data yang difilter
        const totalPages = Math.ceil(filteredData.length / this.dataPerPage);
        const paginationContainer = document.getElementById('pagination-container');
    
        // Reset halaman jika currentPage lebih besar dari totalPages
        if (this.currentPage > totalPages && totalPages > 0) {
            this.currentPage = totalPages; // Set halaman ke halaman terakhir jika currentPage lebih besar dari totalPages
        }
    
        paginationContainer.innerHTML = ''; // Kosongkan kontainer pagination sebelumnya
    
        // Menampilkan pagination hanya jika ada halaman
        if (totalPages > 0) {
            paginationContainer.style.display = 'block';
    
            // Loop untuk menambahkan tombol halaman sesuai dengan totalPages
            for (let i = 1; i <= totalPages; i++) {
                const pageLink = document.createElement('button');
                pageLink.textContent = i;
    
                if (i === this.currentPage) {
                    pageLink.classList.add('active');
                }
    
                pageLink.addEventListener('click', () => {
                    this.currentPage = i;
                    this.displayData(filteredData); // Pastikan untuk memanggil displayData dengan filteredData
                });
    
                paginationContainer.appendChild(pageLink);
            }
        } else {
            paginationContainer.style.display = 'none'; // Jika tidak ada halaman, sembunyikan pagination
        }
    },
    
    handleAddData() {
        const form = document.getElementById('add-data-form');
        form.addEventListener('submit', (event) => {
            event.preventDefault();
    
            const newRecord = {
                deskripsi: document.getElementById('input-deskripsi').value || 'Deskripsi tidak tersedia',
                alamat: document.getElementById('input-lokasi').value || 'Lokasi tidak tersedia',
                wilayah: document.getElementById('input-wilayah').value || 'Wilayah tidak tersedia',
                kecamatan: document.getElementById('input-kecamatan').value || '-',
                kelurahan: document.getElementById('input-kelurahan').value || '-',
                fasilitas: document.getElementById('input-fasilitas').value || '-',
                googlemaps: document.getElementById('input-googlemaps').value || '#',
                foto: [
                    "https://via.placeholder.com/150/0000FF/FFFFFF?text=Foto+1", // Contoh foto hardcoded
                    "https://via.placeholder.com/150/FF0000/FFFFFF?text=Foto+2"  // Contoh foto hardcoded
                ],
                isNew: true,
            };
    
            // Tambahkan data baru ke newData
            this.newData.push(newRecord);
            localStorage.setItem('newAgrowisataData', JSON.stringify(this.newData));
    
            // Tampilkan data dan setup pagination
            this.displayData([...this.cachedData, ...this.newData]);
            this.setupPagination();
    
            form.reset();
            document.getElementById('add-data-modal').classList.add('hidden');
            alert('Data baru berhasil ditambahkan!');
        });
    },

    loadLocalData() {
        try {
            const storedData = JSON.parse(localStorage.getItem('newAgrowisataData'));
            if (Array.isArray(storedData)) {
                this.newData = storedData;
            }
        } catch (error) {
            console.error('Error loading local data:', error);
            this.newData = [];
        }
    }
};

export default Agrowisata;



const desawisata = {
  async render() {
    const proxyUrl = 'https://api.allorigins.win/get?url=';
    const apiUrl = 'https://katalogdata.kemenparekraf.go.id/api/3/action/datastore_search?resource_id=80461f76-2299-495b-bcba-e39205b9c0f1';

    const data = await this.fetchData(apiUrl);

    const container = document.getElementById('desawisata-list');
    if (container) {
      if (data.length > 0) {
        container.innerHTML = data.map(record => `
          <div class="desawisata-item">
            <h3>${record.Destinasi || 'Nama desa tidak tersedia'}</h3>
            <p><strong>Kabupaten/Kota:</strong> ${record['Kabupaten/Kota'] || 'Kabupaten tidak tersedia'}</p>
            <p><strong>Provinsi:</strong> ${record.Provinsi || 'Provinsi tidak tersedia'}</p>
            <p><strong>Tahun Sertifikasi:</strong> ${record['Tahun Sertifikasi'] || 'Tahun tidak tersedia'}</p>
          </div>
        `).join('');
      } else {
        container.innerHTML = '<p>Data desa wisata tidak ditemukan.</p>';
      }
    } else {
      console.error('Elemen dengan ID "desawisata-list" tidak ditemukan');
    }
  },

  async fetchData(url) {
    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
      const result = await response.json();
      return result.result?.records || [];
    } catch (error) {
      console.error('Error fetching data:', error);
      return [];
    }
  },

  async afterRender() {
    // Logika tambahan setelah render, misalnya menambahkan event listener
    const items = document.querySelectorAll('.desawisata-item h3');
    items.forEach(item => {
      item.addEventListener('click', () => {
        alert(`Anda mengklik: ${item.textContent}`);
      });
    });
  }
};

export default desawisata;


FIKSSS tapi pakai API pihak ketiga
const API_URLS = [
    'https://katalog.data.go.id/api/3/action/datastore_search?resource_id=266e3b85-1c43-4a84-b864-a54d41c218b1',
    'https://katalog.data.go.id/api/3/action/datastore_search?resource_id=bfe834ff-1cb6-4c1c-ae75-4fbe6d62f1ae'
];

const Agrowisata = {
    cachedData: [],
    newData: [],
    currentPage: 1,
    dataPerPage: 10,

    async render() {
        return `
            <nav>
                <ul>
                    <li><a href="#/agrowisata" id="nav-home">Beranda</a></li>
                    <li><a href="#/saved-data-page" id="nav-saved">Data Tersimpan</a></li>
                </ul>
            </nav>
            <h2>Lokasi Agrowisata</h2>
            <label for="filter-wilayah">Filter Wilayah:</label>
            <select id="filter-wilayah">
                <option value="">Semua Wilayah</option>
                <option value="Jakarta Barat">Jakarta Barat</option>
                <option value="Jakarta Timur">Jakarta Timur</option>
                <option value="Jakarta Utara">Jakarta Utara</option>
                <option value="Jakarta Selatan">Jakarta Selatan</option>
                <option value="Wilayah Lainnya">Wilayah Lainnya</option>
            </select>
            <div id="data-container">Loading data...</div>
            
            <button id="add-data-btn" aria-label="Tambah Data Baru">+</button>
        
            <div id="add-data-modal" class="modal hidden">
                <div class="modal-content">
                    <h3>Tambahkan Data Baru</h3>
                    <form id="add-data-form">
                        <input type="text" id="input-deskripsi" placeholder="Deskripsi" required>
                        <input type="text" id="input-lokasi" placeholder="Lokasi" required>
                        <input type="text" id="input-wilayah" placeholder="Wilayah" required>
                        <input type="text" id="input-kecamatan" placeholder="Kecamatan">
                        <input type="text" id="input-kelurahan" placeholder="Kelurahan">
                        <input type="text" id="input-fasilitas" placeholder="Fasilitas">
                        <input type="url" id="input-googlemaps" placeholder="Google Maps URL">
                        <button type="submit">Tambahkan</button>
                        <button type="button" id="cancel-btn">Batal</button>
                    </form>
                </div>
            </div>
            <div id="pagination-container"></div>
        `;
    },

    async afterRender() {
        const dataContainer = document.getElementById('data-container');
        const filterWilayah = document.getElementById('filter-wilayah');
        const addDataButton = document.getElementById('add-data-btn');
        const modal = document.getElementById('add-data-modal');
        const cancelButton = document.getElementById('cancel-btn');
        const paginationContainer = document.getElementById('pagination-container');

        this.loadLocalData();
        // Filter data saat filter berubah
        filterWilayah.addEventListener('change', () => {
            this.displayData([...this.cachedData, ...this.newData]);
            this.setupPagination();
        });

        // Load data baru dari localStorage
        const savedData = this.loadSavedData(); 

        // Ambil data dari API
        await this.fetchData();

        // Tampilkan data
        this.displayData([...this.cachedData, ...this.newData]);

        // Event handler untuk tombol tambah data
        addDataButton.addEventListener('click', () => {
            modal.classList.remove('hidden');
        });

        cancelButton.addEventListener('click', () => {
            modal.classList.add('hidden');
        });

        this.handleAddData();
        this.setupPagination();
    },

    async fetchData() {
        if (this.cachedData.length > 0) return;

        try {
            const responses = await Promise.all(API_URLS.map(url => fetch(url)));
            const results = await Promise.all(responses.map(res => res.json()));

            this.cachedData = results.flatMap((result, index) => {
                if (result.success) {
                    return index === 1
                        ? this.mapDataFromAPI2(result.result.records)
                        : result.result.records;
                }
                return [];
            });
        } catch (error) {
            console.error('Error fetching data:', error);
            const dataContainer = document.getElementById('data-container');
            dataContainer.innerHTML = '<p>Error loading data. Please try again later.</p>';
        }
    },

    mapDataFromAPI2(records) {
        return records.map(record => ({
            deskripsi: record.nama_lokasi || 'Nama tidak tersedia',
            alamat: record.lokasi || 'Lokasi tidak tersedia',
            wilayah: record.wilayah || 'Wilayah tidak tersedia',
            kecamatan: '',
            kelurahan: '',
            fasilitas: '',
            googlemaps: '',
            isApi2: true
        }));
    },

    loadSavedData() {
        try {
            const savedData = JSON.parse(localStorage.getItem('savedAgrowisata')) || [];
            return savedData;
        } catch (error) {
            console.error('Error loading saved data:', error);
            return [];
        }
    },

    displayData(records) {
        const dataContainer = document.getElementById('data-container');
        const selectedWilayah = document.getElementById('filter-wilayah').value;
        const savedData = this.loadSavedData();
        const allRecords = [...records, ...savedData];
    
        // Filter data berdasarkan wilayah
        const filteredData = this.filterDataByWilayah(allRecords, selectedWilayah);
    
        // Hilangkan duplikasi berdasarkan deskripsi atau id
        const uniqueData = this.removeDuplicateData(filteredData);
    
        // Validasi currentPage agar tidak melebihi total halaman
        const totalPages = Math.ceil(uniqueData.length / this.dataPerPage);
        if (this.currentPage > totalPages && totalPages > 0) {
            this.currentPage = totalPages; // Set currentPage ke halaman terakhir jika lebih besar dari total
        }
    
        // Paginate data
        const paginatedData = this.paginateData(uniqueData, this.currentPage);
    
        // Tampilkan data
        dataContainer.innerHTML = `
            <div id="new-data-section">
                <h3>Data Baru yang Ditambahkan</h3>
                <div id="new-data-list"></div>
            </div>
            <div id="old-data-section">
                <h3>Data Agrowisata</h3>
                <div id="old-data-list"></div>
            </div>
        `;
    
        // Render data baru
        const newDataList = document.getElementById('new-data-list');
        const newData = paginatedData.filter(record => record.isNew);
        this.renderData(newData, newDataList);
    
        // Render data lama (termasuk yang sudah disimpan)
        const oldDataList = document.getElementById('old-data-list');
        const oldData = paginatedData.filter(record => !record.isNew);
        this.renderData(oldData, oldDataList);
    
        // Setup pagination hanya jika ada data yang ditampilkan
        this.setupPagination(); // Memanggil setupPagination untuk memperbarui pagination
    },
    

    removeDuplicateData(records) {
        const seen = new Set();
        return records.filter(record => {
            const identifier = record.deskripsi; 
            if (seen.has(identifier)) {
                return false;
            }
            seen.add(identifier);
            return true;
        });
    },
    
    filterDataByWilayah(records, selectedWilayah) {
        if (!selectedWilayah) return records;

        return records.filter(record => {
            if (selectedWilayah === "Wilayah Lainnya") {
                return !["Jakarta Barat", "Jakarta Timur", "Jakarta Utara", "Jakarta Selatan", "Jakarta Pusat"].includes(record.wilayah);
            }
            return record.wilayah === selectedWilayah;
        });
    },

    paginateData(records, currentPage) {
        const filteredData = records.filter(record => record.deskripsi && record.deskripsi.trim() !== '');
        const totalPages = Math.ceil(filteredData.length / this.dataPerPage);
        const startIndex = (currentPage - 1) * this.dataPerPage;
        const endIndex = startIndex + this.dataPerPage;
    
        // Jika halaman kosong, kembali ke halaman pertama
        if (startIndex >= filteredData.length) {
            this.currentPage = totalPages; // Pastikan currentPage tidak lebih besar dari totalPages
            return filteredData.slice(0, this.dataPerPage);
        }
    
        return filteredData.slice(startIndex, endIndex);
    },


    renderData(data, container) {
        container.innerHTML = '';
        data.forEach(record => {
            const recordElement = this.createRecordElement(record);
            container.appendChild(recordElement);
        });
    },

    createRecordElement(record) {
        const recordElement = document.createElement('div');
        recordElement.classList.add('record');
        recordElement.innerHTML = `
            <h3>${record.deskripsi}</h3>
            <p><strong>Lokasi:</strong> ${record.alamat}</p>
            <p><strong>Wilayah:</strong> ${record.wilayah}</p>
            <p><strong>Kecamatan:</strong> ${record.kecamatan || '-'}</p>
            <p><strong>Kelurahan:</strong> ${record.kelurahan || '-'}</p>
            <p><strong>Fasilitas:</strong> ${record.fasilitas || '-'}</p>
            ${record.googlemaps && record.googlemaps.trim() !== '' ? `<p><a href="${record.googlemaps}" target="_blank">Lihat di Google Maps</a></p>` : ''}
            <button class="save-btn">Simpan</button>
        `;

        const saveBtn = recordElement.querySelector('.save-btn');
        const savedData = JSON.parse(localStorage.getItem('savedAgrowisata')) || [];
        const isSaved = savedData.some(saved => saved.deskripsi === record.deskripsi);

        // Update tombol jika data sudah tersimpan
        if (isSaved) {
            saveBtn.textContent = 'Tersimpan';
            saveBtn.disabled = true;
        }

        saveBtn.addEventListener('click', () => {
            this.saveData(record);
            saveBtn.textContent = 'Tersimpan';
            saveBtn.disabled = true;
        });

        return recordElement;
    },

    saveData(record) {
        const savedData = JSON.parse(localStorage.getItem('savedAgrowisata')) || [];
        
        // Cek apakah data sudah ada di dalam savedData berdasarkan deskripsi
        const isAlreadySaved = savedData.some(saved => saved.deskripsi === record.deskripsi);
        
        if (!isAlreadySaved) {
            savedData.push(record);
            localStorage.setItem('savedAgrowisata', JSON.stringify(savedData));
        }
    },
 
    setupPagination() {
        const allData = [...this.cachedData, ...this.newData];
        const filterValue = document.getElementById('filter-wilayah').value;
        const filteredData = this.filterDataByWilayah(allData, filterValue).filter(record => record.deskripsi && record.deskripsi.trim() !== '');
    
        // Hitung total halaman yang diperlukan berdasarkan data yang difilter
        const totalPages = Math.ceil(filteredData.length / this.dataPerPage);
        const paginationContainer = document.getElementById('pagination-container');
    
        // Reset halaman jika currentPage lebih besar dari totalPages
        if (this.currentPage > totalPages && totalPages > 0) {
            this.currentPage = totalPages; // Set halaman ke halaman terakhir jika currentPage lebih besar dari totalPages
        }
    
        paginationContainer.innerHTML = ''; // Kosongkan kontainer pagination sebelumnya
    
        // Menampilkan pagination hanya jika ada halaman
        if (totalPages > 0) {
            paginationContainer.style.display = 'block';
    
            // Loop untuk menambahkan tombol halaman sesuai dengan totalPages
            for (let i = 1; i <= totalPages; i++) {
                const pageLink = document.createElement('button');
                pageLink.textContent = i;
    
                if (i === this.currentPage) {
                    pageLink.classList.add('active');
                }
    
                pageLink.addEventListener('click', () => {
                    this.currentPage = i;
                    this.displayData(filteredData); // Pastikan untuk memanggil displayData dengan filteredData
                });
    
                paginationContainer.appendChild(pageLink);
            }
        } else {
            paginationContainer.style.display = 'none'; // Jika tidak ada halaman, sembunyikan pagination
        }
    },
    
    filterDataByWilayah(records, selectedWilayah) {
        const validRecords = records.filter(record => record.deskripsi && record.deskripsi.trim() !== '');
        
        if (!selectedWilayah) return validRecords;
    
        return validRecords.filter(record => {
            if (selectedWilayah === "Wilayah Lainnya") {
                return !["Jakarta Barat", "Jakarta Timur", "Jakarta Utara", "Jakarta Selatan", "Jakarta Pusat"].includes(record.wilayah);
            }
            return record.wilayah === selectedWilayah;
        });
    },

    handleAddData() {
        const form = document.getElementById('add-data-form');
        form.addEventListener('submit', (event) => {
            event.preventDefault();
    
            const newRecord = {
                deskripsi: document.getElementById('input-deskripsi').value || 'Deskripsi tidak tersedia',
                alamat: document.getElementById('input-lokasi').value || 'Lokasi tidak tersedia',
                wilayah: document.getElementById('input-wilayah').value || 'Wilayah tidak tersedia',
                kecamatan: document.getElementById('input-kecamatan').value || '-',
                kelurahan: document.getElementById('input-kelurahan').value || '-',
                fasilitas: document.getElementById('input-fasilitas').value || '-',
                googlemaps: document.getElementById('input-googlemaps').value || '#',
                isNew: true,
            };
    
            // Tambahkan data baru ke newData
            this.newData.push(newRecord);
            localStorage.setItem('newAgrowisataData', JSON.stringify(this.newData));
    
            // Tampilkan data dan setup pagination
            this.displayData([...this.cachedData, ...this.newData]);
            this.setupPagination(); // Pastikan untuk memanggil ini
    
            form.reset();
            document.getElementById('add-data-modal').classList.add('hidden');
            alert('Data baru berhasil ditambahkan!');
        });
    },

    loadLocalData() {
        try {
            const storedData = JSON.parse(localStorage.getItem('newAgrowisataData'));
            if (Array.isArray(storedData)) {
                this.newData = storedData;
            }
        } catch (error) {
            console.error('Error loading local data:', error);
            this.newData = [];
        }
    }
};


export default Agrowisata;


INDEX.JS
window.addEventListener('load', () => {
    const currentHash = window.location.hash;
    if (!currentHash) {
        window.location.hash = '#/agrowisata'; // Arahkan ke halaman default
    }

    const route = window.location.hash.slice(1).toLowerCase();
    const page = routes[route] || NotFoundPage; // Gunakan NotFoundPage jika route tidak ditemukan
    page.render().then(() => page.afterRender());
});
